# -*- coding: utf-8 -*-
"""Visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R1ZuYZeno_bRoguikuioiKkPoTOAuTrb
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
#from binance.client import Client
import datetime as dt
from datetime import datetime, timedelta
from tqdm import tqdm as tqdm
import xgboost as xgb
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error
from math import sqrt
import os
import joblib

st.title("Karimunjawa")

st.subheader("Dataproject 3 - EDEM MDA 2021")

st.image("https://github.com/juanluishg/dataproject1/blob/main/WhatsApp%20Image%202020-12-11%20at%2022.35.04.jpeg?raw=true")

option = st.sidebar.selectbox("Wich Dashboard?",('Predictions','Model'))
st.header(option)

num_days = st.sidebar.slider('Number of days',1,30,10)

#Download dataset
cmd = 'wget https://raw.githubusercontent.com/20rd1/dataproject3/main/notebook/data/df_final.csv'
os.system(cmd)
#Download model
cmd = 'wget https://raw.githubusercontent.com/20rd1/dataproject3/main/modelos/svr_1_dias.pkl'
os.system(cmd)
cmd = 'wget https://raw.githubusercontent.com/20rd1/dataproject3/main/modelos/svr_5_dias.pkl'
os.system(cmd)
cmd = 'wget https://raw.githubusercontent.com/20rd1/dataproject3/main/modelos/svr_10_dias.pkl'
os.system(cmd)
cmd = 'wget https://raw.githubusercontent.com/20rd1/dataproject3/main/modelos/svr_30_dias.pkl'
os.system(cmd)
#Load model
#model = xgb.XGBRegressor()
model = joblib.load("svr_1_dias.pkl")
model5 = joblib.load("svr_5_dias.pkl")
model10 = joblib.load("svr_10_dias.pkl")
model30 = joblib.load("svr_30_dias.pkl")
#Load dataset
df = pd.read_csv("df_final.csv", index_col=0)
df_date = df.copy()
df_date["date"] = 0
for i, u in df_date.iterrows():
  df_date.loc[i, "date"] = dt.datetime(int(u["year"]), int(u["month"]), int(u["dayofmonth"]))

df_date['date'] = pd.to_datetime(df_date['date'])

features_names = ['Close','Volume', 'NumberTransactions','Close SP500','halving','Close Gold','Close_eth','PIB','CPI','dayofweek','quarter','month','year','dayofyear','dayofmonth','weekofyear','MA_EMA_PCA','Momentum_PCA','Bollinger_PCA','tipoint']
X_y = df[features_names]
#Scale dataset
scaler = MinMaxScaler()
scaled = scaler.fit_transform(X_y)
scaled = pd.DataFrame(scaled, columns=features_names)
#Delete Close
X = scaled.drop("Close", axis=1)
#X = df.drop("Close", axis=1)
#Predict 1 day
y_preds = model.predict(X)
validacion_p = pd.DataFrame(y_preds, columns={'Close'})

#Unscale
preds = scaler.inverse_transform(pd.concat([validacion_p, X], axis=1))

preds = pd.DataFrame(preds, columns=features_names)
preds["date"] = df_date.date.dt.date
preds = preds.set_index('date')

#Predict 5 days
y_preds5 = model5.predict(X)
validacion_p5 = pd.DataFrame(y_preds5, columns={'Close'})

#Unscale
preds5 = scaler.inverse_transform(pd.concat([validacion_p5, X], axis=1))

preds5 = pd.DataFrame(preds5, columns=features_names)
preds5["date"] = df_date.date.dt.date
preds5 = preds5.set_index('date')

#Predict 10 days
y_preds10 = model10.predict(X)
validacion_p10 = pd.DataFrame(y_preds10, columns={'Close'})

#Unscale
preds10 = scaler.inverse_transform(pd.concat([validacion_p10, X], axis=1))

preds10 = pd.DataFrame(preds10, columns=features_names)
preds10["date"] = df_date.date.dt.date
preds10 = preds10.set_index('date')

#Predict 30 days
y_preds30 = model30.predict(X)
validacion_p30 = pd.DataFrame(y_preds30, columns={'Close'})

#Unscale
preds30 = scaler.inverse_transform(pd.concat([validacion_p30, X], axis=1))

preds30 = pd.DataFrame(preds30, columns=features_names)
preds30["date"] = df_date.date.dt.date
preds30 = preds30.set_index('date')


if option == 'Predictions':
    st.subheader('Machine Learning Predictions')
    if num_days == 1:
      st.line_chart(preds['Close'])

      st.write("Today: {}\nValue: {}".format(df_date.date.dt.date.values[-31], df_date.Close.values[-31]))
      st.write("Prediction 1 day: {}\nValue: {}".format(preds.index.values[-30], preds.Close.values[-30]))
    elif num_days == 5:
      st.line_chart(preds5['Close'])

      st.write("Today: {}\nValue: {}".format(df_date.date.dt.date.values[-31], df_date.Close.values[-31]))
      st.write("Prediction 5 days: {}\nValue: {}".format(preds5.index.values[-26], preds5.Close.values[-26]))
    elif num_days == 10:
      st.line_chart(preds10['Close'])

      st.write("Today: {}\nValue: {}".format(df_date.date.dt.date.values[-31], df_date.Close.values[-31]))
      st.write("Prediction 10 days: {}\nValue: {}".format(preds10.index.values[-26], preds10.Close.values[-26]))
    elif num_days == 30:
      st.line_chart(preds30['Close'])

      st.write("Today: {}\nValue: {}".format(df_date.date.dt.date.values[-31], df_date.Close.values[-31]))
      st.write("Prediction 30 days: {}\nValue: {}".format(preds30.index.values[-1], preds30.Close.values[-1]))
    else:
      st.line_chart(preds['Close'])

      st.write("Today: {}\nValue: {}".format(df_date.date.dt.date.values[-31], df_date.Close.values[-31]))
      st.write("Try other number of days")

elif option == 'Model':
    st.subheader('Machine Learning Predictions vs True')

    if num_days == 1:

      preds_orgs = pd.DataFrame({"Preds": preds['Close'].values, "True": df["Close"].values})
      preds_orgs["date"] = df_date.date
      preds_orgs = preds_orgs.set_index('date')

      st.line_chart(preds_orgs)

      st.write("Mean Absolute Error: %0.2f"%mean_absolute_error(preds['Close'].values, df["Close"].values))
      st.write("Mean Squared Error: %0.2f"%mean_squared_error(preds['Close'].values, df["Close"].values))
      rmse = sqrt(mean_squared_error(preds['Close'].values, df["Close"].values))
      st.write("Root Mean Squared Error: %0.2f"%rmse)
    elif num_days == 5:
      preds_orgs = pd.DataFrame({"Preds": preds5['Close'].values, "True": df["Close"].values})
      preds_orgs["date"] = df_date.date
      preds_orgs = preds_orgs.set_index('date')

      st.line_chart(preds_orgs)

      st.write("Mean Absolute Error: %0.2f"%mean_absolute_error(preds5['Close'].values, df["Close"].values))
      st.write("Mean Squared Error: %0.2f"%mean_squared_error(preds5['Close'].values, df["Close"].values))
      rmse = sqrt(mean_squared_error(preds5['Close'].values, df["Close"].values))
      st.write("Root Mean Squared Error: %0.2f"%rmse)
    elif num_days == 10:
      preds_orgs = pd.DataFrame({"Preds": preds10['Close'].values, "True": df["Close"].values})
      preds_orgs["date"] = df_date.date
      preds_orgs = preds_orgs.set_index('date')

      st.line_chart(preds_orgs)

      st.write("Mean Absolute Error: %0.2f"%mean_absolute_error(preds10['Close'].values, df["Close"].values))
      st.write("Mean Squared Error: %0.2f"%mean_squared_error(preds10['Close'].values, df["Close"].values))
      rmse = sqrt(mean_squared_error(preds10['Close'].values, df["Close"].values))
      st.write("Root Mean Squared Error: %0.2f"%rmse)
    elif num_days == 30:
      preds_orgs = pd.DataFrame({"Preds": preds30['Close'].values, "True": df["Close"].values})
      preds_orgs["date"] = df_date.date
      preds_orgs = preds_orgs.set_index('date')

      st.line_chart(preds_orgs)

      st.write("Mean Absolute Error: %0.2f"%mean_absolute_error(preds30['Close'].values, df["Close"].values))
      st.write("Mean Squared Error: %0.2f"%mean_squared_error(preds30['Close'].values, df["Close"].values))
      rmse = sqrt(mean_squared_error(preds30['Close'].values, df["Close"].values))
      st.write("Root Mean Squared Error: %0.2f"%rmse)
    else:
      preds_orgs = pd.DataFrame({"Preds": preds['Close'].values, "True": df["Close"].values})
      preds_orgs["date"] = df_date.date
      preds_orgs = preds_orgs.set_index('date')

      st.line_chart(preds_orgs)

      st.write("Try other number of days")